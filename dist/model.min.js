"use strict";class Model{constructor(t={}){Object.defineProperty(this,"_",{enumerable:!1,configurable:!1,writable:!1,value:{data:t,events:{},delta:{},suspended:!1,count:0}});const e=Object.keys(t);for(const t of e)this._addProperty(t)}_isObject(t){return"[object Object]"===Object.prototype.toString.call(t)}_isDate(t){return t instanceof Date&&!isNaN(t.valueOf())}_clone(t){let e=null;if(this._isObject(t)){e={};const s=Object.keys(t);for(const i of s)this._isObject(t[i])||Array.isArray(t[i])?e[i]=this._clone(t[i]):this._isDate(t[i])?e[i]=new Date(t[i].getTime()):e[i]=t[i]}else if(Array.isArray(t)){e=[];for(const s of t){let t;t=this._isObject(s)||Array.isArray(s)?this._clone(s):this._isDate(s)?new Date(s.getTime()):s,e.push(t)}}return e}_isEquals(t,e){let s=!1;if(Array.isArray(t)&&Array.isArray(e)){s=t.join("")===e.join("")}else s=t===e;return s}_addProperty(t){this._.data.hasOwnProperty(t)&&(this._isObject(this._.data[t])?Object.defineProperty(this,t,{enumerable:!0,configurable:!0,writable:!0,value:this._.data[t]}):Object.defineProperty(this,t,{configurable:!1,enumerable:!0,get:()=>{let e=this._.data[t];return"function"==typeof this[t+"Read"]&&(e=this[t+"Read"](e)),e},set:e=>{"function"==typeof this[t+"Write"]&&(e=this[t+"Write"](e));var s=this._.data[t],i={};if(s!==e)if(this._.data[t]=e,this._.delta[t]=this._.delta[t]||{original:s},this._.delta[t].actual=e,this._.delta[t].previous=s,this._.suspended)this._.count++;else if(Array.isArray(this._.events[t])){i[t]={};const e=Object.keys(this._.delta[t]);for(const s of e)i[t][s]=this._.delta[t][s];this._isEquals(this._.delta[t].actual,this._.delta[t].original)&&delete this._.delta[t];for(const e of this._.events[t])"function"==typeof e&&e.call(e,i)}}}))}_toObject(){return this._clone(this._.data)}_suspend(){this._.suspended=!0,this._.count=0}_resume(){if(this._.suspended=!1,this._.count>0){this._.count=0;const t=[],e=Object.keys(this._.data);for(const s of e)for(const e of this._.events[s])t.includes(e)||t.push(e);for(const e of t)"function"==typeof e&&e.call(this,this._.delta)}}_delta(){return this._clone(this._.delta)}_reset(){this._.delta={}}_revert(t){const revert=t=>{this._.delta[t]&&(this[t]=this._.delta[t].original)};if("string"==typeof t){const e=t.split(" ");for(const t of e)revert(t)}else if(Array.isArray(t))for(const e of t)revert(e);else if(null==t){const t=Object.keys(this._.data);for(const e of t)revert(e)}}_changed(t){let e=!1;const s=this._delta(),changed=t=>{let e=!1;return s[t]&&s[t].original!==this[t]&&(e=!0),e};if("string"==typeof t){const s=t.split(" ");for(const t of s)if(changed(t)&&!1===e){e=!0;break}}else if(Array.isArray(t)){for(const s of t)if(changed(s)&&!1===e){e=!0;break}}else if(null==t){e=Object.keys(s).length>0}return e}_watch(){let t,e,s={};if(arguments.length>0){if(1===arguments.length?"function"==typeof arguments[0]?t=arguments[0]:this._isObject(arguments[0])&&(e=arguments[0]):arguments.length>=2&&(e=arguments[0],t=arguments[1]),"string"==typeof e&&"function"==typeof t){const i=e.split(" ");for(const e of i)s[e]=t}else if(Array.isArray(e)&&"function"==typeof t)for(const i of e)s[i]=t;else if(this._isObject(e))s=e;else if("function"==typeof t){const e=Object.keys(this._.data);for(const i of e)this._isObject(this._.data[i])||(s[i]=t)}const i=Object.keys(s);for(const e of i)this._.events[e]&&!this._.events[e].includes(t)?this._.events[e].push(s[e]):this._.events[e]=[s[e]]}}_unwatch(){let t,e;const remove=t=>{if("function"==typeof e&&Array.isArray(this._.events[t])){var s=this._.events[t].findIndex((t=>t.toString()===e.toString()));s>-1&&this._.events[t].splice(s,1)}else this._.events[t]=null,delete this._.events[t]};if(arguments.length>0)if(1===arguments.length?"function"==typeof arguments[0]?e=arguments[0]:this._isObject(arguments[0])&&(t=arguments[0]):arguments.length>=2&&(t=arguments[0],e=arguments[1]),"string"==typeof t){const e=t.split(" ");for(const t of e)remove(t)}else if(Array.isArray(t))for(const e of t)remove(e);else if(this._isObject(t)){const e=Object.keys(t);for(const t of e)remove(t)}else{const t=Object.keys(this._.data);for(const e of t)this._isObject(this._.data[e])||remove(e)}else this._.events={}}_add(t,e=null){this._.data[t]=e,this._addProperty(t)}_clear(t={}){const e=Object.keys(this);for(const s of e)t[s]?this[s]=t[s]:Array.isArray(this[s])?this[s]=[]:"boolean"==typeof this[s]?this[s]=!1:"number"==typeof this[s]?this[s]=0:"string"==typeof this[s]?this[s]="":this[s]=null}}"undefined"!=typeof module&&void 0!==module.exports?module.exports={Model:Model}:(window.bimo=window.bimo||{},window.bimo.Model=Model);